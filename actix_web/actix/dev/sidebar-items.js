initSidebarItems({"mod":[["actors","Helper actors"],["channel",""],["fut","Custom `Future` implementation with `Actix` support"],["io",""]],"struct":[["Condition",""],["ContextFut",""],["ContextParts",""],["Envelope",""],["Mailbox",""],["Recipient","`Recipient` type allows to send one specific message to an actor."],["Registry","Actors registry"],["SpawnHandle","Spawned future handle. Could be used for cancelling spawned future."],["Supervisor","Actor supervisor"],["System","System is an actor which manages runtime."],["SystemRegistry","System wide actors registry"],["TimerFunc","An `ActorFuture` that runs a function in the actor's context after a specified amount of time."]],"trait":[["ActorFuture","Trait for types which are a placeholder of a value that may become available at some later point in time."],["ArbiterService","Trait defines arbiter's service."],["AsyncContextParts",""],["EnvelopeProxy",""],["MessageResponse","Trait which defines message response"],["ResponseChannel","Trait defines message response channel"],["ToEnvelope","Converter trait, packs message to suitable envelope"],["WrapFuture","Helper trait that allows conversion of normal future into `ActorFuture`"]],"type":[["ResponseActFuture","A specialized actor future for async message handler"],["ResponseFuture","A specialized future for async message handler"]]});